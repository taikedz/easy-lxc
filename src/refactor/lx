#!/bin/bash

# based on tutorial and docs at
# https://www.digitalocean.com/community/tutorials/getting-started-with-lxc-on-an-ubuntu-13-04-vps
# https://linuxcontainers.org/lxc/getting-started/
# https://help.ubuntu.com/lts/serverguide/lxc.html

#%include helpfile.sh
#%include bashout.sh autohelp.sh argstore.sh

globalargs=$(args_store "$@")

set -u

NOROOT=no

CONTAINERNAME=
TEMPLATEOS=download
ACTION=
EXPOSURE=
EPHEMERAL=no

CUSER=$(whoami)
CPORT=22

DOATTACH=no
INTERFACES='^'$(ifconfig | grep -P '^[^\s]+'|cut -d' ' -f 1|xargs echo|sed 's/ /|/g')'$'
numpat='^[0-9]+$'

CLONETO=
SNAPSHOT=

# PASSARGS will always contain base64-encoded arguments. Because space-escaping. # FIXME - use arrays
PASSARGS=

function attachcontainer {
	if [[ $DOATTACH = yes ]]; then
		lxc-attach -n "$CONTAINERNAME"
	fi
}

function usecontainer {
	lxc-ls | grep "$CONTAINERNAME" >/dev/null || faile "No such container $CONTAINERNAME"
	exposecontainer # perform exposition when a container is confirmed
}

function getconip {
	lxc-info -n "$CONTAINERNAME" |grep "IP:" | awk '{print $2}'
}

function getconhost {
	local gHOST=$(getent hosts "${CONTAINERNAME}.lxc"|awk '{print $2}')
	if [[ -z "$gHOST" ]]; then
		gHOST=$(getconip)
	fi
	if [[ -z "$gHOST" ]]; then faile "No host ${CONTAINERNAME}.lxc nor IP for the host. Is it started?" ; fi
	echo "$gHOST"
}

function waitcontainerip {
	CONIP=""
	while [[ "$CONIP" = "" ]]; do
		CONIP=$(getconip)
		if [[ "$CONIP" != '' ]]; then
			echo "$CONIP"
			return
		else
			sleep 1
		fi
	done
}

function lx_scp {
	CPFILES=
	DESTDIR=
	CONIP=$(getconhost)
	debuge "copying [$*]"
	while [[ -n "$*" ]]; do
		ARG="$1" ; shift
		if [[ -z "$*" ]]; then
			DESTDIR="$(echo $ARG|base64 -di)"
		else
			CPFILES="$CPFILES $ARG"
		fi
	done
	
	local DNONCE=lx_scp_$(date "+%F%T $CONTAINERNAME $UID"|md5sum|awk '{print $1}') # collision prevention
	mkdir /tmp/$DNONCE
	for x in $CPFILES; do # make softlinks to files whose names have no spaces
		x=$(echo "$x"|base64 -di|sed -r "s|^([^/])|$PWD/\1|")
		debuge "Processing $x"
		# Need to specify a fuller path when the file is in current directory
		# otherwise we get a "too many symbolic links" error
		ln -s "$x" "/tmp/$DNONCE/$(basename "$x")"
	done

	# and now use globbing to copy in one go
	scp -P $CPORT /tmp/$DNONCE/* "$CUSER@$CONIP:$DESTDIR" || debuge "$(ls -l /tmp/$DNONCE )"
	rm /tmp/$DNONCE/*
	rmdir /tmp/$DNONCE
}

function makecontainerhost {
	CONIP=$(waitcontainerip)
	grep -P "$CONTAINERNAME.lxc\s+# LXC host" /etc/hosts && {
		warne "Host $CONTAINERNAME.lxc already configured"
		return
	}

	debuge "Adding $CONIP $CONTAINERNAME to hosts file"
	# not using the mysu routine because of multiple nested commands and quotes... FIXME use arrays
	[[ "$NOROOT" = yes ]] || {
		uconfirm "Auto configure host $CONIP $CONTAINERNAME ?" &&
		  sudo su -c "echo '$CONIP $CONTAINERNAME.lxc # LXC host' >> /etc/hosts"
	}
}

function removecontainerhost {
	CONIP=$(waitcontainerip)
	debuge "removing $CONIP from hosts"
	[[ "$NOROOT" = yes ]] || {
		uconfirm "Auto-remove $CONTAINERNAME from hosts?" &&
		  sudo sed -r "/$CONTAINERNAME.lxc\s+# LXC host\$/d" -i /etc/hosts
	}
	debuge "Removal peformed"
}

function exposecontainer {
	if [[ -n "$EXPOSURE" ]]; then
		usecontainer
		CONIP=$(getconip)
		if [[ -z "$CONIP" ]]; then
			warne "Could not get container IP - no exposure performed"
			return
		fi
		if [[ "$CONIP" = '-' ]]; then
			warne "Container [$CONTAINERNAME] is not started and has no IP address."
			return
		fi
		for expx in $(echo "${EXPOSURE#,}" | sed 's/,/ /g'); do
			myiface=$(echo $expx|cut -d':' -f 1)
			myext=$(echo $expx|cut -d':' -f 2)
			myint=$(echo $expx|cut -d':' -f 3)
			warne "Adding iptables rule ..."
			mysu iptables -t nat -A PREROUTING -i $myiface -p tcp --dport $myext -j DNAT --to "$CONIP:$myint"
		done
	fi
}

function mysu { # FIXME use arrays!
	# declare -a calling=(your arguments "listed here")
	# mysu "${calling[@]}"
	if [[ "$NOROOT" = yes ]]; then return; fi

	sudo "$@"
}

function setupuser {
	read -p "Username: "
	myuser=$(cat /etc/passwd|cut -d ':' -f1|grep -P "^$REPLY\$")
	userhome=$(cat /etc/passwd|grep -P "^$myuser:"|cut -d ':' -f6)
	[[ -z "$myuser" ]] && faile "No such user [$myuser]"

	# there is an issue when setting up on ecryptfs encrypted home directories
	# https://bugs.launchpad.net/ubuntu/+source/lxc/+bug/1389305
	if [[ $(mount | grep "$myuser" | grep ecryptfs -c) -gt 0 ]]; then
		uconfirm "$myuser seems to be using an encrypted home folder. Their containers will not allow suid executables. Install workaround under /var/nocryptlxc?" && {
			nclxcd="/var/nocryptlxc/$myuser"
			[[ -d "$nclxcd" ]] && { warne "nocrypt directory for $myuser already exists. Abort" ; return ; }
			mkdir -p "$nclxcd"

			[[ -d "$userhome/.config/lxc" ]] && mv "$userhome/.config/lxc" "$nclxcd/config"
			[[ -d "$userhome/.local/share/lxc" ]] && mv "$userhome/.local/share/lxc" "$nclxcd/store"
			mkdir -p "$nclxcd/config"
			mkdir -p "$nclxcd/store"
			chown $myuser:$myuser "$nclxcd" "$nclxcd/config" "$nclxcd/store"
			
			ln -s "$nclxcd/config" "$userhome/.config/lxc"
			ln -s "$nclxcd/store" "$userhome/.local/share/lxc"
		}
	fi
	[[ ! -e "$userhome/.config/lxc" ]] && mkdir -p "$userhome/.config/lxc"
	chown -R $myuser:$myuser "$userhome/.config/lxc"

	grep -P "^\s*$myuser" /etc/lxc/lxc-usernet >/dev/null || echo "$myuser veth lxcbr0 10" >> /etc/lxc/lxc-usernet
	cp -n /etc/lxc/default.conf "$userhome/.config/lxc/"
	chown $myuser:$myuser "$userhome/.config/lxc/default.conf"
	grep 'lxc.id_map = ' "$userhome/.config/lxc/default.conf" || {
cat <<EOF >> "$userhome/.config/lxc/default.conf"

lxc.id_map = u 0 $(cat /etc/subuid |grep $myuser| awk -F ':' '{print $2,$3}')
lxc.id_map = g 0 $(cat /etc/subgid |grep $myuser| awk -F ':' '{print $2,$3}')
EOF
	}
	# these need to be set so as to be able to run unprivileged
	# the rest of the structure in $userhome/.local/share/lxc should be OK
	chmod o+x $userhome
	chmod o+x $userhome/.local
	chmod o+x $userhome/.local/share
	chmod o+x $userhome/.local/share/lxc
}

NOROOT=$(args_get "$globalargs" "^-z$")
globalargs=$(args_remove "$globalargs" "^-z$")

if [[ -z "$globalargs" ]]; then
	lxc-ls --fancy
	exit 0
fi

if [[ -z "$globalargs" ]]; then
	faile "You must specify the action to take"
fi

ACTION=$1 ; shift

# FIXME migrate to using globalargs
DOATTACH=$(args_get "$globalargs" "^-a$" || echo "$yes")

while [[ -n "$*" ]]; do 
	ARG=$1 ; shift
	debuge "Processing [$ARG]"
	case "$ARG" in
		-a)
			debuge attach option
			DOATTACH=yes
			;;
		-t)
			TEMPLATEOS="$1" ; shift
			;;
		-e)
			IFACE=$1 ; shift
			EXPORT=$1 ; shift
			INPORT=$1 ; shift
			if [[ ! "$IFACE" =~ $INTERFACES ]] || [[ ! "$EXPORT" =~ $numpat ]] || [[ ! "$INPORT" =~ $numpat ]]; then
				faile "Invalid interface, external port or internal port: $IFACE $EXPORT $INPORT"
			fi
			EXPOSURE="$EXPOSURE,$IFACE:$EXPORT:$INPORT"
			;;
		-u)
			CUSER=$1 ; shift
			;;
		-p)
			CPORT=$1 ; shift
			;;
		-to)
			CLONETO=$1 ; shift
			;;
		-ephemeral)
			EPHEMERAL=yes
			;;
		-s)
			SNAPSHOT=-s
			;;
		--)
			while [[ -n "$*" ]]; do
				debuge "Passing arg thru $1"
				PASSARGS="$PASSARGS $(echo "$1"|base64 -w 0)" # passing space characters around subrountines is hell
				shift
			done
			;;
		--install)
			DOINSTALL=yes
			;;
		--help|-h)
			printhelp
			exit 0
			;;
		--debug)
			DEBUGMODE=yes
			;;
		*)
			debuge "Got container $ARG"
			CONTAINERNAME=$ARG
			;;
	esac
done

if [[ "$ACTION" = install ]]; then
	[[ $UID -ne 0 ]] && faile "You need to be root"
	which lxc-ls >/dev/null 2>&1 || ( uconfirm "Install LXC?" && {
		apt update
		apt install lxc
	}
	)
	lxc-checkconfig

	uconfirm "Setup unprivilieged user?" && setupuser
	exit 0
fi


if [[ -z "$CONTAINERNAME" ]]; then
	faile "You must specify a container name"
fi

if [[ "$ACTION" = create ]]; then
	time lxc-create -n "$CONTAINERNAME" -t "$TEMPLATEOS"
	# this downloads from some online location... where??
elif [[ "$ACTION" = start ]]; then
	usecontainer
	if [[ "$EPHEMERAL" = yes ]]; then
		lxc-start-ephemeral -o "$CONTAINERNAME" -d
	else
		lxc-start -n "$CONTAINERNAME" -d
	fi
	debuge "Making container"
	makecontainerhost
	debuge "Attaching container"
	attachcontainer
elif [[ "$ACTION" = info ]]; then
	usecontainer
	lxc-info -n "$CONTAINERNAME"
elif [[ "$ACTION" = stop ]]; then
	usecontainer
	removecontainerhost
	lxc-stop -n "$CONTAINERNAME"
	warne "Run 'iptables -t nat -L -v' to check for dangling port forward rules"
elif [[ "$ACTION" = destroy ]]; then
	usecontainer
	read -p "[1;31mTo destroy the container [1;32m$CONTAINERNAME[1;31m, type its name in again: [0m"
	if [[ "$REPLY" = "$CONTAINERNAME" ]]; then
		lxc-destroy -n "$CONTAINERNAME"
	fi
elif [[ "$ACTION" = copy ]]; then
	usecontainer
	if [[ -z "$CLONETO" ]]; then
		faile "You did not define destination container with -to option"
	fi
	if [[ "$SNAPSHOT" = '-s' ]]; then
		lxc-snapshot -o "$CONTAINERNAME" -n "$CLONETO"
	else
		lxc-clone -o "$CONTAINERNAME" -n "$CLONETO"
	fi
elif [[ "$ACTION" = scp ]]; then
	usecontainer
	lx_scp $PASSARGS
elif [[ "$ACTION" = ssh ]]; then
	usecontainer
	CONIP=$(getconhost)
	ssh ${CUSER}@$CONIP -p $CPORT
elif [[ "$ACTION" = use ]]; then
	usecontainer
	attachcontainer
elif [[ "$ACTION" = attach ]]; then
	usecontainer
	DOATTACH=yes
	attachcontainer
else
	faile "Unknown command [$ACTION]"
fi
