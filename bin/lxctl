#!/bin/bash

### Simple LXC controller Usage:help
#
# This is a simple wrapper script to better facilitate using lxc. It supports providing the container name alone (rather than
# having to insert -n when you forgot it), and implicitly filling in the container in simple situations; and automatically using
# sudo unless explicitly switched off.
#
#
#	[ SUDOCMD=[sudo] ] lxctl { create | destroy | start | stop } [ { CONTAINER | "." } [ OPTIONS ] ]
#
#	[ SUDOCMD=[sudo] ] lxctl ls OPTIONS
#
#	lxctl last [ CONTAINER ]
#
#
# Calls the appropriate LXC action on the specified container. If CONTAINER is not specified, lxctl will attempt to use the last
# explicitly specified container.
#
# You can call `lxctl last` to see the container, or provide a container name to set the container.
#
# You can use "." as the name of a container to specifically use the last-used container.
#
# The list of actions in the first example are a subset - the real subset is in fact any command in the lxc-* family.
#
# Environment variables:
#
#	SUDOCMD - if you explicitly set this to an empty string, the actions will not use sudo
#
#	BACKINGSTORE - defines the backing store used to store data; one of
#		dir - the default, uses simply a directory
#			can take the additional option
#			--dir ROOTFSPATH : the path to the rootfs of the container
#
#		best - tries in order btrfs, zfs, lvm, then dir.
#
#		btrfs - use a btrfs system backed by the host filesystem's btrfs layer
#
#		zfs - use a zfs system backed by the host filesystem's zfs layer
#
#		lvm - use a LVM system backed by a LVM block device
#
#		loop - use a LVM system, backed by a file representing the filesystem, mounted on the loopback device
#			takes additional options
#			--lvname LVNAME : the name of the logical volume to create
#			--vgname VGNAME : the name of the volume group to use or create
#			--thinpool THINPOOLNAME : the name of the thinpool to use or create
#			--fstype FSTYPE : the filesystem to use (default is "ext4")
#			--fssize FSSIZE : the size of the volume (default is "1G")
#
#		(see `man lxc-create` or use the --help option for more information)
#
# 	DOWNLOAD_KEYSERVER
#	 	To work around a bug when behind stringent firewalls, any "create -t download" operation is called using a keyserver on port 80
#	 	This is always active. You can override which key server is used by setting DOWNLOAD_KEYSERVER in your environment
#	 	DOWNLOAD_KEYSERVER must be the HKP URL to a keyserver, or remain undefined to use the default.
#
###/doc

set -euo pipefail

LASTCONTAINERF=~/.config/lxctl_last
LASTCONTAINERD="$(dirname "$LASTCONTAINERF")"

if [[ ! -d "$LASTCONTAINERD" ]]; then
	mkdir -p "$LASTCONTAINERD"
fi

function printhelp {
	echo -e "\033[1;35m"
	sed "$(egrep -n '^.+Usage:' "$0"|cut -d':' -f1|head -n 1),$(grep -n '###/doc' "$0"|cut -d':' -f1|head -n 1) p" -n "$0"
	echo -e "\033[0m"
	exit
}

if [[ -z "$*" ]] || [[ "$*" = "--help" ]]; then
	printhelp
fi

function faile {
	echo -e "\033[31m$*\033[0m" >&2
	exit
}

ACTION="$1"; shift

if [[ "$*" =~ --help ]]; then
	man "lxc-$ACTION"
	exit
fi

# Elevation prefix
: ${SUDOCMD=sudo}

# Backingstore option
: ${BACKINGSTORE=dir}
BACKINGSTORE="-B $BACKINGSTORE"

# Added options we may want to insert before the extra options
PREOPTS=

# Set the indicator that says hey there are extended options
XTRATOKEN=
# Placeholder for extended options
EXTRAOPTS=

: ${DOWNLOAD_KEYSERVER="hkp://p80.pool.sks-keyservers.net:80"}

# Process actions that do  not take containers
case "$ACTION" in
	ls)
		$SUDOCMD lxc-ls --fancy "$@"
		exit
		;;
	last)
		if [[ -z "$*" ]]; then
			cat "$LASTCONTAINERF"
		else
			echo "$1" > "$LASTCONTAINERF"
		fi
		exit
		;;
	create)
		PREOPTS="$PREOPTS $BACKINGSTORE"
		if [[ "$*" =~ "-t download" ]]; then
			EXTRAOPTS="$EXTRAOPTS --keyserver $DOWNLOAD_KEYSERVER"
		fi
		;;
esac

if ! which "lxc-$ACTION" 2>/dev/null >/dev/null ; then
	faile "No such action lxc-$ACTION"
fi


# Add our own token if one does not already exist in the user's args
if [[ -n "$EXTRAOPTS" ]] && [[ ! "$*" =~ $(echo ' -- ') ]]; then
	XTRATOKEN='--'
fi

if [[ -n "$*" ]]; then
	CONTAINER="$1"; shift
fi

if [[ -z "${CONTAINER:-}" ]] || [[ "${CONTAINER:-}" = '.' ]]; then
	CONTAINER=$(cat "$LASTCONTAINERF")
fi

(
	# Print out a copy of the call, for info
	set -x

	# Do not quote token and opts -- would be safer to be able to turn them into array ...
	"$SUDOCMD" "lxc-$ACTION" -n "$CONTAINER" $PREOPTS "$@" $XTRATOKEN $EXTRAOPTS
)
RES=$?

if [[ "$RES" = 0 ]]; then
	echo "$CONTAINER" > "$LASTCONTAINERF"
fi

