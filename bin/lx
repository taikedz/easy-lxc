#!/bin/bash

### Simple LXC controller Usage:help
#
# This is a simple wrapper script to better facilitate using lxc. It supports providing the container name alone (rather than
# having to insert -n when you forgot it), and implicitly filling in the container in simple situations; and automatically using
# sudo unless explicitly switched off.
#
#
#	[ SUDOCMD=[sudo] ] lxctl COMMAND [ { CONTAINER | "." } [ OPTIONS ] ]
#
#	lxctl last [ CONTAINER ]
#
#
# Calls the appropriate LXC action on the specified container. If CONTAINER is not specified or is '.', lxctl will attempt to use
# the last explicitly specified container.
#
# COMMAND is any command in the lxc-* family.
#
# You can call `lxctl last` to see the last used container, or provide a container name to set the container.
#
# You can use "." as the name of a container to specifically use the last-used container.
#
# You can type a partial container name too for example if you have two containers "myapp" and "myapp-live",
# you can type
#
#   lx info live
#
# to automatically select the live app. If you use the name "app", it will match neither, and attempt to give you info on
# a container exactly named "app". This works for all commands except "create" and "destroy".
#
# Environment variables:
#
#	SUDOCMD - if you explicitly set this to an empty string, the actions will not use sudo
#
# DEFAULTS FILE
#
# You can configure default arguments for commands in $HOME/.config/lxctl/defaults
#
# The line strucutre for the defaults file is
#
# 	command ARUGUMENTS
#
# The arguments is a sequence of tokens to be passed, with "{}" denoting where the command line arguments passed at runtime should be inserted.
#
# For example
#
# 	create -t download {} -- -t ubuntu -a amd64
#
# This causes any create command passed without any arguments to by default select the download template, and specify the distro and architecture.
#
###/doc

set -euo pipefail

LXCONFIGDIR="$HOME/.config/lxctl"
LASTCONTAINERF="$LXCONFIGDIR/last"
LXDEFAULTSFILE="$LXCONFIGDIR/defaults"

if [[ ! -d "$LXCONFIGDIR" ]]; then
	mkdir -p "$LXCONFIGDIR"
fi

if [[ ! -f "$LXDEFAULTSFILE" ]]; then
	echo -e 'ls --fancy\ncreate {} -- --keyserver hkp://keyserver.ubuntu.com:80' > "$LXDEFAULTSFILE"
fi

if [[ ! -f "$LASTCONTAINERF" ]]; then
	echo '.' > "$LASTCONTAINERF"
fi

function printhelp {
	echo -e "\033[1;35m"
	sed "$(egrep -n '^.+Usage:' "$0"|cut -d':' -f1|head -n 1),$(grep -n '###/doc' "$0"|cut -d':' -f1|head -n 1) p" -n "$0"
	echo -e "\033[0m"
	exit
}

if [[ -z "$*" ]] || [[ "$*" = "--help" ]]; then
	printhelp
fi

function faile {
	echo -e "\033[31m$*\033[0m" >&2
	exit
}

function getcontainer {
	local clist="$($SUDOCMD lxc-ls |sed -r 's/\s+/\n/g'| grep "$1")"
	if [[ "$(echo "$clist"|wc -l|cut -d' ' -f1)" != 1 ]]; then
		echo "[33m$clist[0m" >&2
		# Must have only one result, else return the input itself
		echo "$1"
	else
		echo "$clist"
	fi
}

function readdeffile {
	local defline="$(grep -P "^$1\s" "$LXDEFAULTSFILE"|tail -n 1)"
	echo "${defline/$1/}" # | tee /dev/stderr
}

function getpreargs {
	echo "$1"|sed -r 's/\{\}.*$//'
}

function getpostargs {
	if [[ "$1" =~ \{\} ]]; then
		echo "$1"|sed -r 's/^.*\{\}//'
	fi
}

function getlastcontainer {
	if [[ -f "$LASTCONTAINERF" ]]; then
		cat "$LASTCONTAINERF"
	fi
}

function setlastcontainer {
	echo "$1" > "$LASTCONTAINERF"
}

ACTION="$1"; shift

if [[ "$*" =~ --help ]]; then
	man "lxc-$ACTION"
	exit
fi

# Elevation prefix
: ${SUDOCMD=sudo}

: ${ROOTHOME=/root}
if [[ -z "$SUDOCMD" ]]; then
	ROOTHOME="$HOME"
fi

## Internal general options
# Added options we may want to insert before the user options
PREOPTS=
# Placeholder for extended options

## User-defined general options
DEFAULTS="$(readdeffile "$ACTION")"
PREARGS="$(getpreargs "$DEFAULTS")"
POSTARGS="$(getpostargs "$DEFAULTS")"

# Process actions that do  not take containers
case "$ACTION" in
	last)
		if [[ -z "$*" ]]; then
			getlastcontainer
		else
			setlastcontainer "$1"
		fi
		exit
		;;
esac

if ! which "lxc-$ACTION" 2>/dev/null >/dev/null ; then
	faile "No such action lxc-$ACTION"
fi

if [[ -n "$*" ]]; then
	CONTAINER="$1"; shift
	if [[ "$ACTION" != create ]] && [[ "$ACTION" != destroy ]]; then
		CONTAINER="$(getcontainer "$CONTAINER")"
	elif [[ -z "$CONTAINER" ]]; then
		faile "You must explicitly specify a container !"
	fi
fi

if [[ -z "${CONTAINER:-}" ]] || [[ "${CONTAINER:-}" = '.' ]]; then
	CONTAINER="$(getlastcontainer)"

	if [[ -z "$CONTAINER" ]] && [[ ! "$ACTION" =~ $(echo 'ls|top') ]]; then
		faile "You must explicitly specify a container !"
	fi
fi

(
	# Print out a copy of the call, for info
	set -x

	# Do not quote token and opts -- would be safer to be able to turn them into array ...
	"$SUDOCMD" HOME="$ROOTHOME" "lxc-$ACTION" -n "$CONTAINER" $PREOPTS $PREARGS "$@" $POSTARGS
)
RES=$?

if [[ "$RES" = 0 ]]; then
	echo "$CONTAINER" > "$LASTCONTAINERF"
fi

